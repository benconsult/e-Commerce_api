1. To avoid adding try-catch manually, we use ('express-async-errors')
2. middleware for error and not found should come last
3. NB: error handler is invoke in the existing route, hence should come last
4. Morgan: for debugging route on console GET / 200 14 - 2.959 ms
5. custom validators on mongoosejs for email. install npm i validator
used in place of custom regex (job-api)
6. For email checks, it can be checked either in controller or user
add 'unique' property for mongoose validation. NB: unique validation did not work.
7. first user should be have the admin role only.
8.  Hash password should be save in a pre save hook in the user shema.
NB: hashing before saving the password
9. JWT: sign(payload,secret,options),verify(token,secret)
NB: instead of sending the entire object, we can extract some features to be useed as TOKEN (id,name,role) as payload
Hence, we generate a TOKEN  which will be used for authorization
We are returning tokenUser and token instead of the entire user - UPDATED
10. we are using utils folder for cookies so that we can move them from one project to another
Here, we are refractoring the jwt to use utils folder by creating a function to create a token
accept oject of payload.
Also, another fuction for verify
NB: you can import the 2 functions or use index.js (just like errors)
Finally, use the two functions in the AuthController.js: update the token variable to use the
payload argument.
NOTE: the essence of refractoring is REUSEABILITY
11. Sending jwt token with cookies
Previously: Browser - Aplication - Local storage 
Alternatively, we use, session storage - cookies
12. Cookeies: we are no longer sending token as response after registration , but cookies
res.cookie(name,value, {options object})
NB: time is measured in miliseconds: for 1 day = 1000ms * 60 sec * 60 mins * 24 hours
new Date(Date.now())
Run and check the cookie tab on postman

